# coding: utf-8
# /*##########################################################################
#
# Copyright (c) 2016-2017 European Synchrotron Radiation Facility
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ###########################################################################*/


__authors__ = ["J. Garriga"]
__license__ = "MIT"
__date__ = "12/08/2019"

# import os

import numpy

from silx.gui import qt
from silx.gui.colors import Colormap
from silx.gui.plot.StackView import StackViewMainWindow
from silx.gui.plot.items.roi import RectangleROI
from silx.gui.plot.tools.roi import RegionOfInterestManager, RegionOfInterestTableWidget

# from linkdick06.core.dataset import Dataset
from darfix.core.roi import apply_3D_ROI


class ROISelectionWidget(qt.QWidget):
    """
    Widget that allows the user to pick a ROI in any image of the dataset.
    """
    signalComputed = qt.Signal(list, list)

    def __init__(self, parent=None):
        qt.QWidget.__init__(self, parent)

        self.setLayout(qt.QVBoxLayout())
        self._sv = StackViewMainWindow()
        self._okB = qt.QPushButton("Ok", parent=self)
        self._okB.pressed.connect(self.applyRoi)
        self._okB.setEnabled(False)
        self._sv.setColormap(Colormap(name='viridis', normalization='linear'))
        self.layout().addWidget(self._sv)
        self.layout().addWidget(self._okB)

        plot = self._sv.getPlot()
        self._roiManager = RegionOfInterestManager(plot)
        self._roiTable = RegionOfInterestTableWidget()
        self._roiTable.setRegionOfInterestManager(self._roiManager)

        self._roi = RectangleROI()
        self._roi.setLabel('ROI')
        self._roi.setGeometry(origin=(0, 0), size=(10, 10))
        self._roi.setEditable(True)
        self._roiManager.addRoi(self._roi)
        self._roiTable.setColumnHidden(4, True)

        # Add the region of interest table and the buttons to a dock widget
        widget = qt.QWidget()
        layout = qt.QVBoxLayout()
        widget.setLayout(layout)
        layout.addWidget(self._roiTable)

        def roiDockVisibilityChanged(visible):
            """Handle change of visibility of the roi dock widget.

            If dock becomes hidden, ROI interaction is stopped.
            """
            if not visible:
                self._roiManager.stop()

        dock = qt.QDockWidget('Image ROI')
        dock.setWidget(widget)
        dock.visibilityChanged.connect(roiDockVisibilityChanged)
        plot.addTabbedDockWidget(dock)

    def setDataset(self, dataset):
        """
        Dataset setter. Saves the dataset and updates the stack with the dataset
        data.

        :param Dataset dataset: dataset to be used in the widget.
        """
        self.dataset = dataset
        self.setStack(dataset.data)
        self._okB.setEnabled(True)

    def setStack(self, *arg, **kwargs):
        """
        Sets the data passed as aguments in the stack.
        Mantains the current frame showed in the view.
        """
        first_frame_shape = self.dataset.data[0].shape
        self.setRoi(center=(first_frame_shape[0] / 2, first_frame_shape[1] / 2),
                    size=(first_frame_shape[0] / 5, first_frame_shape[1] / 5))
        nframe = self._sv.getFrameNumber()
        self._sv.setStack(*arg, **kwargs)
        self._sv.setFrameNumber(nframe)

    def setRoi(self, roi=None, origin=None, size=None, center=None):
        """
        Sets Region Of Interest of the stack of images.

        :param RectangleROI roi: A region of interest.
        :param Tuple origin: If a roi is not provided, used as an origin for the roi
        :param Tuple size: If provided used as a size for the roi. If this argument is
                           specified `roi` has to be unspecified.
        """
        if roi is not None and size is not None:
            raise ValueError("'roi' and 'size' are mutual exclusive")

        if roi is not None:
            self._roi = roi
        else:
            self._roi.setGeometry(origin=origin, size=size, center=center)

    def getRoi(self):
        """
        Returns the roi selected in the stackview.

        :rtype: silx.gui.plot.items.roi.RectangleROI
        """
        return self._roi

    def applyRoi(self):
        """
        Function to apply the region of interest in the dataset.
        It also emits a signal with the origin and size of the applied roi.
        Sets the stack with the new dataset.
        """
        self._okB.setEnabled(False)
        roi = self.getRoi()
        self.dataset.data = apply_3D_ROI(self.dataset.data, roi.getSize() / 2,
                                         numpy.flip(roi.getCenter()))
        if len(self.dataset.dark_frames):
            self.dataset.dark_frames = apply_3D_ROI(self.dataset.dark_frames,
                                                    roi.getSize() / 2, numpy.flip(roi.getCenter()))

        self.signalComputed.emit(roi.getOrigin().tolist(), roi.getSize().tolist())
        self.setStack(self.dataset.data)
        self._okB.setEnabled(True)

    def clearStack(self):
        self._okB.setEnabled(False)
        self._sv.setStack(None)
        self._roi.setGeometry(origin=(0, 0), size=(10, 10))
