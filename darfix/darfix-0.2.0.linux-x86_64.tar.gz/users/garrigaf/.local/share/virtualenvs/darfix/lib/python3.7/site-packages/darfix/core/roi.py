# coding: utf-8
# /*##########################################################################
#
# Copyright (c) 2016-2017 European Synchrotron Radiation Facility
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#
# ###########################################################################*/


__authors__ = ["J. Garriga"]
__license__ = "MIT"
__date__ = "17/07/2019"


import numpy


def apply_2D_ROI(img, w, h, center=None):
    """Function that computes the ROI of an image.

    :param ndarray img: The image
    :param int w: Width
    :param int h: Height
    :param center: Center of the ROI
    :type center: Union[2d array_like, None]
    :returns: ndarray
    :raises: AssertionError
    """
    if center is None:  # use the center of the image
        center = (numpy.array(img.shape) / 2).astype(int)
    else:
        center = numpy.array(center)

    assert (center >= numpy.array([0, 0])).all() \
        and (center < numpy.array(img.shape)).all(), "Center must be valid pixel"

    return img[max(0, center[0] - h):center[0] + h + 1, max(0, center[1] - w):center[1] + w + 1]


def apply_3D_ROI(data, size, center=None):
    """Function that computes the ROI of each image in stack of images.

    :param ndarray img: The stack of images
    :param int w: Width
    :param int h: Height
    :param center: Center of the ROI
    :type center: Union[2d array_like, None]
    :returns: ndarray
    :raises: AssertionError
    """

    assert size is not None, "The size of the roi must be given"

    w, h = int(size[0]), int(size[1])

    data = numpy.asanyarray(data)

    if center is None:  # use the center of the image
        center = [int(data[0].shape[i] / 2) for i in range(len(data[0].shape))]
    else:
        center = [int(i) for i in center]

    assert all(i >= 0 for i in center) \
        and all(j < data[0].shape[i] for i, j in enumerate(center)), "Center must be valid pixel"

    return data[:, max(0, center[0] - h):center[0] + h + 1, max(0, center[1] - w):center[1] + w + 1]
